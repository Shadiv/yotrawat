# Import telebot and schedule
import telebot
from telebot.async_telebot import AsyncTeleBot
from telebot import types

#Async states - replacing next step handlers
from telebot.asyncio_storage import StateMemoryStorage
from telebot.asyncio_handler_backends import State, StatesGroup
from telebot import asyncio_filters

# Python libs
import logging
import asyncio
import aioschedule
import time
import datetime

#Files - users_db, config
import config
import users_config
from default_exercises import daily_default, full_body_default

logging.basicConfig(filename='bot.log', level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

bot = AsyncTeleBot(token=config.TOKEN)
users_tmp = users_config.users

@bot.message_handler(commands=['start'])
async def start(message):
    # Send the initial greeting message
    msg = f'<i>–ê–≥–∞, –≤–æ—Ç —Ç—ã –∏ –ø–æ–ø–∞–ª—Å—è!</i>'
    await bot.send_message(message.chat.id, msg, parse_mode='html')
    user_id = message.chat.id

    # Define a dictionary to store user data
    user_data = {'user_id': user_id, 'gender': '', 'schedule': []}

    # Send a question asking for gender with buttons
    markup1 = telebot.types.InlineKeyboardMarkup()
    g1 = telebot.types.InlineKeyboardButton('–ú', callback_data='male')
    g2 = telebot.types.InlineKeyboardButton('–ñ', callback_data='female')
   
    markup1.add(g1, g2)
    await bot.send_message(message.chat.id, '–ì–æ–≤–æ—Ä–∏ –±—ã—Å—Ç—Ä–æ, —Ç—ã –∫—Ç–æ?!', reply_markup=markup1)
    await bot.register_next_step_handler_by_chat_id(message, process_gender_step, user_data=user_data)

@bot.callback_query_handler(func=lambda call: True)
async def process_gender_step(call):
    # Process the answer for gender question
    gender = call.data
    user_data = {'user_id': call.message.chat.id, 'gender': gender, 'schedule': []}
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ì–æ–≤–æ—Ä–∏ –±—ã—Å—Ç—Ä–æ, —Ç—ã –∫—Ç–æ?!')
    # Send a question asking for days of the week with comma-separated values
    await bot.send_message(call.message.chat.id, '–ó–∞–ø–∏—Å–∞–ª')
    id_list = [i['user_id'] for i in users_tmp]
    if user_data['user_id'] not in id_list:
        users_tmp.append(user_data)
    await bot.send_message(call.message.chat.id, '–í –∫–∞–∫–∏–µ –¥–Ω–∏ –ø–æ–π–¥—ë—à—å –≤ –∑–∞–ª?! –ù–∞–ø–∏—à–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!')
    await bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_schedule_step)


async def process_schedule_step(message):  
    usr_schedule = message.text
    # Check if the schedule is provided in a comma-separated format
    if ',' not in usr_schedule:
        # Send an error message and ask the question again
        await bot.send_message(message.chat.id, '–í—Å–µ–≥–æ –æ–¥–∏–Ω –¥–µ–Ω—å?! –ê –Ω—É-–∫–∞ —Å–æ–±–µ—Ä–∏—Å—å –∏ –≤–≤–µ–¥–∏ –ø–æ–±–æ–ª—å—à–µ –¥–Ω–µ–π, –¥–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!')
        await bot.register_next_step_handler(message, process_schedule_step)
        return

    # Update the user data dictionary with the schedule
    usr_schedule = [i.strip() for i in usr_schedule.split(',')]
    days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    for i in usr_schedule:
        if i.lower() not in days:
            await bot.send_message(message.chat.id, '–®—É—Ç–∫–∏ —à—É—Ç–∏—Ç—å –≤–∑–¥—É–º–∞–ª? –ê –Ω—É-–∫–∞ —Å–æ–±–µ—Ä–∏—Å—å –∏ –≤–≤–µ–¥–∏ –¥–Ω–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!')
            await bot.register_next_step_handler_by_chat_id(message.chat.id, process_schedule_step)
            return
    def_schedule = []
    for i in days:
        for d in usr_schedule:
            if d.lower() == i:
                def_schedule.append(days.index(i))
    for i in users_tmp:
        if i['user_id'] == message.chat.id: 
            i['schedule'] = def_schedule

    # Send a confirmation message
    markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    b1 = telebot.types.KeyboardButton("–ü—Ä–æ–≥—Ä–∞–º–º–∞")
    markup2.add(b1)
    await bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –∑–∞–ø–æ–º–Ω–∏–ª!', reply_markup=markup2)
    update_list_of_users(users_tmp)

@bot.message_handler(content_types=['text'])
async def handle_text(message):
    if message.text not in config.CHAT_WORD_COMMANDS:
        await bot.send_message(message.chat.id, '–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å —á—Ç–æ —Ç—ã —Ç–∞–º –±–æ—Ä–º–æ—á–µ—à—å, –∏–¥–∏ –ª—É—á—à–µ —Å–¥–µ–ª–∞–π —Ä–∞—Å—Ç—è–∂–∫—É –∏ —Å–ø–∏–Ω—É –≤—ã–ø—Ä—è–º–∏, –∞ —Ç–æ —Å–∏–¥–∏—à—å –∫–∞–∫ —Å–æ–±–∞–∫–∞ —Å—É—Ç—É–ª–∞—è')
    elif message.text == "–ü—Ä–æ–≥—Ä–∞–º–º–∞":
        for usr in users_tmp:
            usr_vals = [i for i in usr.values()]
            user_id, gender, user_schedule = usr_vals[0], usr_vals[1], usr_vals[2]
            exercises = []
            if user_id == message.chat.id:
                if datetime.datetime.now().weekday() not in user_schedule:
                    for ex in daily_default:
                        if ex['gender'] == gender:
                            tmp_ex = ex['exercises']
                            am = ex['amount']
                            exercises.append(f'{tmp_ex[0]}, {am[0]} —Ä–∞–∑')
                            exercises.append(f'{tmp_ex[1]}, {am[1]}')
                            msg = f'{exercises[0]},\n {exercises[1]}'
                            await bot.send_message(message.chat.id, msg)
                elif datetime.datetime.now().weekday() in user_schedule:
                    for ex in full_body_default:
                        if ex['gender'] == gender:
                            exercises = ex['exercises'] 
                            msg = "\n".join(exercises)
                            await bot.send_message(message.chat.id, msg)                     

def update_list_of_users(users_tmp):
    with open('users_config.py', 'w') as f:
        f.write(f'users = {users_tmp}')
    users = users_config.users
    return users

def get_daily(users):
    daily = []
    for user in users: 
        if datetime.datetime.now().weekday() not in user['schedule']:
            daily.append((user['user_id'], user['gender']))
    return daily

async def send_morning_notification(users):
    daily = get_daily(users=users)
    gym = [usr['user_id'] for usr in users if datetime.datetime.now().weekday() not in usr['schedule']]
    for usr in daily:
        msg = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í –∑–∞–ª —Ç—ã —Å–µ–≥–æ–¥–Ω—è, –∫–æ–Ω–µ—á–Ω–æ, –Ω–µ –∏–¥—ë—à—å, –Ω–æ –Ω–µ –∑–∞–±—É–¥—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–≤–∏–≥–∞—Ç—å—Å—è. –Ø –ø—Ä–æ—Å–ª–µ–∂—É!üòâ'
        await bot.send_message(chat_id=usr[0], text=msg)
    for uid in gym:
        msg = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞–¥–µ—é—Å—å, —Ç—ã –Ω–µ –∑–∞–±—ã–ª —Å–æ–±—Ä–∞—Ç—å —Å—É–º–∫—É –≤ –∫–∞—á–∞–ª–∫—É!üòâ'
        await bot.send_message(chat_id=uid, text=msg)

async def send_walk(users):
    daily = get_daily(users=users)
    for usr in daily:
        msg = '–ü–æ–π–¥—ë—à—å –¥–æ–º–æ–π - –≤—ã–π–¥–∏ –Ω–∞ –ø–∞—Ä—É –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ —Ä–∞–Ω—å—à–µ –∏ –ø—Ä–æ–π–¥–∏—Å—å –ø–µ—à–∫–æ–º, —Ö–æ—Ç—å –≤–æ–∑–¥—É—Ö–æ–º –ø–æ–¥—ã—à–∏—à—å!'
        await bot.send_message(chat_id=usr[0], text=msg)
    
async def send_daily(users):
    daily = get_daily(users=users)
    msg_f = '–ú–∞–ª–æ–≤–∞—Ç–æ –¥–≤–∏–≥–∞–µ—à—å—Å—è! –ù—É-–∫–∞ –ø—Ä–∏—Å—è–¥—å-–∫–∞ 20 —Ä–∞–∑!'
    msg_m = "–¢—ã —Ç–∞–º –∫ —Å—Ç—É–ª—É –Ω–µ –ø—Ä–∏—Ä–æ—Å? –ê –Ω—É-–∫–∞ —É–ø–∞–ª –æ—Ç–∂–∞–ª—Å—è 25 —Ä–∞–∑!"
    msg_p = '–ù–µ–ø–ª–æ—Ö–æ–π –¥–µ–Ω—å, –Ω–æ –±—É–¥–µ—Ç –≥—Ä—É—Å—Ç–Ω–æ –µ—Å–ª–∏ —Ç—ã –Ω–µ —Å–¥–µ–ª–∞–µ—à—å –º–∏–Ω—É—Ç—É –ø–ª–∞–Ω–∫–∏ –ø–æ–∫–∞ –æ–Ω –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! –í–ø–µ—Ä—ë–¥!'
    if time.strftime("%H", time.localtime()) == '11' or  time.strftime("%H", time.localtime()) == '18':
        for usr in daily:
            if usr[1] == 'female':
                await bot.send_message(chat_id=usr[0], text=msg_f)
            elif usr[1] == 'male':
                await bot.send_message(chat_id=usr[0], text=msg_m)
    elif time.strftime("%H:%M", time.localtime()) == '20:00':
        for usr in daily:
            await bot.send_message(chat_id=usr[0], text=msg_p)

users = update_list_of_users(users_tmp) 

# async def run_test(users):
#     for usr in users:
#         usr_id = usr['user_id']
#         await bot.send_message(chat_id=usr_id, text='testing, attention please')

async def scheduler():
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


aioschedule.every().day.at('05:30').do(send_morning_notification, users)
aioschedule.every().day.at('11:00').do(send_daily, users)
aioschedule.every().day.at('15:30').do(send_walk, users)
aioschedule.every().day.at('18:00').do(send_daily, users)
aioschedule.every().day.at('20:00').do(send_daily, users)
aioschedule.every().hour.do(update_list_of_users, users_tmp)

async def main():
    await asyncio.gather(bot.infinity_polling(), scheduler())

if __name__ == '__main__':
    asyncio.run(main())

    